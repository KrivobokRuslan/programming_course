КОМЕНТАРІ
*****************************************

// одностроковий коментар

/**
 * багатостроковий
 * коментар
 */

ТИПИ ДАНИХ
*****************************************

string - строка, записується в лапках (одинарних чи подвійних 'приклад строки', "приклад у подвійних лапках")
int - ціле число (3, 5, 6, 896574)
float - числа з плаваючою комою - також називаються подвійними (4.345, 2.4675)
bool - логічні значення (true, false)
array - Масив. Составний тип даних, може складатися з інших типів даних (любих).
Приклад:
[
    1,
    2,
    3
],
[
    'one' => 1
],
[
    'array' => [
        '2 array' => [
            2,
            5
        ]
    ]
]
object - Об’єкт
null - Нуль або нічого
resource - Ресурс

ВИВІД НА ЕКРАН
*****************************************
команда echo - вивести на екран (тільки прості типи даних)
функція print_r($value) - приймає 1 аргумент і виводить його на екран

ОПЕРАТОРИ ПРИРИВАННЯ ВИКОНАННЯ КОДУ
*****************************************
break - прирвати роботу коду повністю
continue - прирвати поточну ітерацію циклу

УМОВНІ КОНСТРУКЦІЇ
*****************************************
1) Короткий IF

if (вираз) {

}

Створює гілки в програмі. Якщо вираз дорівнює true, то виконається тіло if в фігурних дужках.
Приклад:

if (10 > 5) {
   echo 'Десять більше пʼяти';
}

на екран виведеться строка, тому що 10 дійсно більше 5 і ми отримуємо true

2) Повний IF
if (вираз) {

} else {

}

Якщо вираз у круглих дужках дорівнює true, то виконується тіло IF в перших фігурних
дужках, але якщо вираз дорівнює false, то виконується тіль секції ELSE (другі фігурні дужки)

3) IF - ELSEIF - ELSE
if (вираз 1) {

} elseif(вираз 2) {

} else {

}

Якщо вираз 1 у круглих дужках дорівнює true, то виконується тіло IF в перших фігурних
дужках, але якщо вираз дорівнює false, то перевіряється вираз 2. Якщо вираз 2 дорівнює true,
то виконується тіло секції ELSEIF у фігурних дужках, але якщо вираз 2 дорівнює false,
то виконується тіло секції ELSE у фігурних дужках.

4) SWITCH - CASE

switch(ЩО ШУКАЄМО) {
    case ВАРІАНТ 1:
        що робити при співпадінні, ЩО ШУКАЄМО з ВАРІАНТ 1
    case ВАРІАНТ 2:
        що робити при співпадінні, ЩО ШУКАЄМО з ВАРІАНТ 2
        break;
    case ВАРІАНТ 3:
        що робити при співпадінні, ЩО ШУКАЄМО з ВАРІАНТ 3
    default:
        що робити, коли нема співпадінь. Ця секція не обовʼязкова
}

У конструкції SWITCH-CASE можна використовувати оператор BREAK.

ЦИКЛИ
**********************************************
1) Цикл FOR

for (СЕКЦІЯ СТВОРЕННЯ ЗМІННИХ; УМОВА ВИКОНАННЯ ЦИКЛУ; СЕКЦІЯ РОБОТИ ПІСЛЯ КОЖНОЇ ІТЕРАЦІЇ) {
    ТІЛО ЦИКЛУ
}

ЧЕРГА ВИКОНАННЯ СЕКЦІЙ:
1) СЕКЦІЯ СТВОРЕННЯ ЗМІННИХ
2) Перевірка УМОВА ВИКОНАННЯ ЦИКЛУ
3) Виконання ТІЛО ЦИКЛУ
4) СЕКЦІЯ РОБОТИ ПІСЛЯ КОЖНОЇ ІТЕРАЦІЇ

СЕКЦІЯ СТВОРЕННЯ ЗМІННИХ виконується тільки 1 раз перед першою ітераціює циклу.
Ітерація циклу - це одне повторення цикла, тобто виконання ТІЛО ЦИКЛУ

2) Цикл WHILE
while (УМОВА) {
    ТІЛО ЦИКЛУ
}

ЧЕРГА ВИКОНАННЯ СЕКЦІЙ:
1) Перевірка УМОВА
2) Виконання ТІЛО ЦИКЛУ

Треба слідкувати за тим, щоб цикл не став нескінченним, тому що нема секції СЕКЦІЯ РОБОТИ ПІСЛЯ КОЖНОЇ ІТЕРАЦІЇ

3) Цикл DO WHILE
   do {
       ТІЛО ЦИКЛУ
   } while (УМОВА)

   ЧЕРГА ВИКОНАННЯ СЕКЦІЙ:
   1) Виконання ТІЛО ЦИКЛУ
   2) Перевірка УМОВА

   Треба слідкувати за тим, щоб цикл не став нескінченним, тому що нема секції СЕКЦІЯ РОБОТИ ПІСЛЯ КОЖНОЇ ІТЕРАЦІЇ.
   Тіло циклу виконається в любому випадку мінімум 1 раз

4) foreach (коротка форма)

foreach (МАСИВ as ЗНАЧЕННЯ) {
    ТІЛО ЦИКЛУ
}

Виконується стільки раз, скільки елементів в переданому масиві.
В короткій формі кожну ітерацію на місце змінної ЗНАЧЕННЯ підставляється кожне значення
кожного елементу масиву. Приклад:

foreach([4,5,6] as $value) {
     echo $value;
}
Ітерації:
1) $value = 4;
   echo $value; // 4
2) $value = 5;
   echo $value; // 5
3) $value = 6;
  echo $value; // 6

5) foreach (повна форма)

foreach (МАСИВ as КЛЮЧ => ЗНАЧЕННЯ) {
    ТІЛО ЦИКЛУ
}

Виконується стільки раз, скільки елементів в переданому масиві.
В повній формі кожну ітерацію на місце змінної КЛЮЧ підставляється ключ кожного елементу масиву, а на місце ЗНАЧЕННЯ підставляється кожне значення
кожного елементу масиву. Приклад:

foreach(['a' => 4, 'f' => 5, 'v' => 6] as $key => $value) {
    echo $key;
    echo $value;
}
Ітерації:
1) $key = 'a';
   $value = 4;
   echo $key; // a
   echo $value; // 4
2) $key = 'f';
   $value = 5;
   echo $key; // f
   echo $value; // 5
3) $key = 'v';
   $value = 6;
   echo $key; // v
   echo $value; // 6

ФУНКЦІЇ
********************************
Потрібні для повторного використання коду.

1) Функція без аргументів

function НАЗВА_ФУНКЦІЇ(): ТИП ДАНИХ ПОВЕРТАЄМОГО ЗНАЧЕННЯ {
    ТІЛО ФУНКЦІЇ
}

Приклад:
function printA(): void {
    echo 'A';
}
Як використовувати:
printA(); // a

2) Функція з аргументами
function НАЗВА_ФУНКЦІЇ(ТИП_ДАНИХ_АРГУМЕНТА_1 АРГУМЕНТ_1, ..., ТИП ДАНИХ_АРГУМЕНТА_N АРГУМЕНТ_N): ТИП ДАНИХ ПОВЕРТАЄМОГО ЗНАЧЕННЯ {
   ТІЛО ФУНКЦІЇ
}

Приклад:
function printLetters(string $letter1, string $letter2): void {
    echo $letter1 . ' ' . $letter2;
}
Як використовувати:
printLetters('a', 'c'); // a c

3) Функція, яка вертає значення. Ключове слово RETURN
function НАЗВА_ФУНКЦІЇ(ТИП_ДАНИХ_АРГУМЕНТА_1 АРГУМЕНТ_1, ..., ТИП ДАНИХ_АРГУМЕНТА_N АРГУМЕНТ_N): ТИП ДАНИХ ПОВЕРТАЄМОГО ЗНАЧЕННЯ {
   ТІЛО ФУНКЦІЇ

   return ЗНАЧЕННЯ;
}

Якщо в функції є ключове слово return, це значить, що функція вертає значення,
і треба обовʼязково вказати який тип даних вернеться з функції
Приклад:
function sum(int $a, int $b): int {
     $sum = $a + $b;

     return $sum;
}
Як використовувати:
1) вивести на екран результат роботи функції:
echo sum(2, 7); // 9
2) зберегти у змінну результат роботи функції:
$suma = sum(4, 4);
echo $suma; // 8
